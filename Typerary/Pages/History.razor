#if DEBUG
@page "/typerary/history"
#else
@page "/history"
#endif
@inject HttpClient Http

<PageTitle>Typerary - History</PageTitle>

<Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(1)">
    <article class="content p-4 m-4 body-bg-alpha rz-shadow-8 rz-border-radius-3">

        <RadzenText TextStyle="TextStyle.DisplayH3" class="mb-5 article-heading" data-en="History">更新履歴</RadzenText>

        @if (_releaseHistories == null)
        {
            <div class="loader">Loading...</div>
        }
        else
        {
            <Animate Animation="Animations.FadeUp" Duration="TimeSpan.FromSeconds(0.75)">
                <RadzenCard class="mt-5">
                    <RadzenDataList WrapItems="true" AllowPaging="true" Data="@_releaseHistories" TItem="ReleaseHistory" PageSize="20" PageNumbersCount="10" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true">
                        <Template Context="release">
                            <RadzenCard Style="width: 100%; padding: 0; overflow: hidden;">
                                <div class="container-fluid">
                                    <div class="row">
                                        <div class="col-lg-3 p-3 release-date">
                                            <RadzenText TextStyle="TextStyle.DisplayH5" TagName="TagName.H6" Class="rz-color-warning-darker">
                                                @(release.GetUpdateDateTime().ToString("yyyy/MM/dd"))
                                            </RadzenText>
                                            <RadzenBadge BadgeStyle="BadgeStyle.Warning" Shade="Shade.Dark">
                                                <div style=" display: flex; align-items: center; text-transform: none;" class="p-1">
                                                    <RadzenIcon Icon="history_edu" /> <span style="font-size: medium">Version @(release.Version)</span>
                                                </div>
                                            </RadzenBadge>
                                        </div>
                                        @if (release.DetailText != null)
                                        {
                                            <div class="col-lg-9 p-3">
                                                <Emoji>
                                                    <p>@((MarkupString)Markdown.ToHtml(release.DetailText))</p>
                                                </Emoji>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </RadzenCard>
                        </Template>
                    </RadzenDataList>
                </RadzenCard>
            </Animate>
        }

        <!--suppress CssUnresolvedCustomProperty -->
        <style>
            .release-date {
                min-height: 72px;
                background-color: var(--rz-warning-lighter);
            }
        </style>
    </article>
</Animate>

@code {
    private const string MetadataJsonUri = "jsonData/update-history.json";
    private List<ReleaseHistory>? _releaseHistories;

    protected override async Task OnInitializedAsync()
    {
        _releaseHistories = new();
        try
        {
            var originData = await Http.GetFromJsonAsync<ReleaseHistoryMetadata>(MetadataJsonUri);
            _releaseHistories = originData?.Histories;
            _releaseHistories?.Sort((obj1, obj2) => obj1.GetUpdateDateTime() < obj2.GetUpdateDateTime() ? 1 : -1);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Exception: HttpRequestException \n{ex.Message}");
        }
        catch (TaskCanceledException ex)
        {
            Console.WriteLine($"Exception: TaskCanceledException \n{ex.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception \n{ex.Message}");
        }
    }

}