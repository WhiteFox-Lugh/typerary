<div class="container-fluid my-2">
    <div class="row rz-border-radius-5">
        <div class="col-6">
            <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H5" class="mb-2">本文</RadzenText>
            <p class="w-100 my-3" Style="font-size: 1.2rem; line-height: 2em; user-select:none">
                @((MarkupString)Markdown.ToHtml(currentTaskSentence))
            </p>
        </div>
        <div class="col-6">
            <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H5" class="mb-2">入力</RadzenText>
            <RadzenTextArea Rows=10 class="w-100" AutoComplete="false" Style="font-size: 1.2rem" @bind-Value=@currentInputSentence @onkeyup=@(args => OnKeyUp(args)) @oncopy=@(args => OnCopy()) @onpaste=@(args => OnPaste()) @oninput=@(args => OnInput(args.Value.ToString())) />
        </div>
    </div>
</div>

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-6">
            <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H5">
                セクション:
            </RadzenText>
            <p Style="font-size: 1.1rem;">
                現在: <strong>@(currentSectionNumber)</strong> / 全体: @(allSectionNumber)
            </p>

            <!-- FIXME: bug 直す-->
            <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H5" class="text-secondary">アルファ版バグ：タイトルと課題文章が一致しない場合はリロードしてください!!（のちにバグ修正対応します）</RadzenText>
            <!-- TODO: タイマーをここに用意したい -->
        </div>
        <div class="col-3">
            <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H5">
                操作:
            </RadzenText>
            <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.P">
                ・Ctrl 押しながら Enter : 次の文へ
            </RadzenText>
            <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.P">
                ・F2 を3回連続押す : 練習終了
            </RadzenText>
        </div>
        <div class="col-3">
            <RadzenButton Shade="Shade.Light" Click=@(args => OnClickNextButton()) Text="次の文へ(Ctrl + Enter)" ButtonStyle="ButtonStyle.Primary" class="w-75 mb-3"/>
            <RadzenButton Variant="Variant.Outlined" Shade="Shade.Lighter" Click=@(args => Finish()) Text="練習終了 (F2 3回連続)" ButtonStyle="ButtonStyle.Danger" class="w-75"/>
        </div>
    </div>
</div>

@code {
    private const string EndAnnounceMent = "### おつかれさまでした！Result(Summary)タブより練習結果を開いてください。";
    private const string HiddenText = "### 隠し要素に気づくとはとても鋭いですね。現時点では何もありませんが、本リリースの際は何か起きるかもしれませんね。";
    private const int F2EndCount = 3;
    private const string EnterKeyStr = "Enter";
    private static string? currentTaskSentence = "";
    private static string currentInputSentence = "";
    private static int F2Count = 0;
    private static int currentSectionNumber = 0;
    private static int allSectionNumber = 0;

    private PracticeController controller;

    [Parameter]
    public BookContent[] BookData { get; set; }

    protected override async Task OnInitializedAsync() => await Init();

    private async Task Init()
    {
        controller = Practice.Controller;
        controller.Init();
        currentTaskSentence = controller.GetFirstTaskSentence();
        currentInputSentence = "";
        F2Count = 0;
        allSectionNumber = controller.GetSectionCount();
        currentSectionNumber = controller.GetCurrentSectionNumber();
        await Task.CompletedTask;
    }

    private void GoNextSection()
    {
        // すでに終わっているなら何もしない
        if (controller.IsFinished) { return; }

        // 次の文章があるかどうか?
        // TODO : なければ最終セクションの処理
        if (controller.HasNextTaskSentence())
        {
            var nextTaskSentence = controller.GetNextTaskSentence();
            currentTaskSentence = nextTaskSentence;
            // 入力文章の送信
            controller.SendAndScoringInputSentence(currentInputSentence);
            currentInputSentence = "";
            controller.IncrementTaskSentenceIndex();
            currentSectionNumber = controller.GetCurrentSectionNumber();
        }
        // 最終セクション
        else
        {
            Finish();
            controller.IncrementTaskSentenceIndex();
        }
    }

    private void OnKeyUp(KeyboardEventArgs keyEvent)
    {
        var isCtrlKeyDown = keyEvent.CtrlKey;
        var isEnterKeyDown = keyEvent.Key.Equals(EnterKeyStr);
        var isF2KeyUp = keyEvent.Key.Equals("F2");

        if (controller.IsFinished)
        {
            if (isCtrlKeyDown && isEnterKeyDown && currentInputSentence.Contains(EndAnnounceMent))
            {
                currentTaskSentence = HiddenText;
            }
            return;
        }
        if (isCtrlKeyDown && isEnterKeyDown)
        {
            GoNextSection();
        }
        else if (isF2KeyUp)
        {
            F2Count++;
            if (F2Count >= F2EndCount) { Finish(); }
        }
        else
        {
            F2Count = 0;
        }

    }

    private void Finish()
    {
        // すでに終わっているなら何もしない
        if (controller.IsFinished) { return; }
            // 何も打たずに練習終了はしない
        if (controller.IsFirstSentence() && currentInputSentence.Equals("")) { return; }

        currentTaskSentence = EndAnnounceMent;
        // 入力文章の送信
        // 空なら送信しない
        if (!currentInputSentence.Equals(""))
        {
            controller.SendAndScoringInputSentence(currentInputSentence);
        }

        controller.DoFinishProcess();
        currentInputSentence = "";
    }

    private void OnClickNextButton()
    {
        GoNextSection();
    }

    private void OnInput(string? value)
    {
        if (value is null) return;
        currentInputSentence = value;
    }

    private void OnCopy() { }

    private void OnPaste() { }
}