@inject IJSRuntime JSRuntime

<script>
    window.isMacOS = () => {
        return navigator.userAgent.includes("Mac");
    };
    
    window.setupTypingShortcuts = function (elementId, dotNetHelper)
    {
        const element = document.getElementById(elementId);
        if (!element) { return; }

        let escTimer = null;

        element.addEventListener('keydown', function (e)
        {
            // Ctrl (Win/Linux) または Cmd (Mac) + Enter → 課題送信
            if ((e.ctrlKey || e.metaKey) && e.key === 'Enter')
            {
                e.preventDefault();
                dotNetHelper.invokeMethodAsync('OnClickNextButton');
            }

            // Escape 長押しで練習終了
            if (e.key === 'Escape')
            {
                escTimer = setTimeout(() => {dotNetHelper.invokeMethodAsync('Finish');}, 1000);
            }
        });

        element.addEventListener('keyup', function (e)
        {
            if (e.key === 'Escape' && escTimer !== null)
            {
                clearTimeout(escTimer);
                escTimer = null;
            }
        });
    }

</script>

<div class="container-fluid my-2">
    <div class="row rz-border-radius-5">
        <div class="col-6">
            <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H5" class="mb-2">本文</RadzenText>
            <p class="w-100 my-3" Style="font-size: 1.2rem; line-height: 2em; user-select:none">
                @if (_currentTaskSentence != null)
                {
                    @((MarkupString)Markdown.ToHtml(_currentTaskSentence))
                }
            </p>
        </div>
        <div class="col-6">
            <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H5" class="mb-2">入力</RadzenText>
            <RadzenTextArea id="typingArea" Rows=10 class="w-100" AutoComplete="false" Style="font-size: 1.2rem" @bind-Value=@_currentInputSentence @oncopy=@OnCopy @onpaste=@OnPaste @oninput=@(args => { if (args.Value != null) { OnInput(args.Value.ToString()); } }) />
        </div>
    </div>
</div>

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-6">
            <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H5">
                セクション:
            </RadzenText>
            <p Style="font-size: 1.1rem;">
                現在: <strong>@(_currentSectionNumber)</strong> / 全体: @(_allSectionNumber)
            </p>
            <!-- TODO: タイマーをここに用意したい -->
        </div>
        <div class="col-3">
            <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H5">
                操作:
            </RadzenText>
            <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.P">
                ・@SubmitShortcutKeyDisplayString : 次の文へ
            </RadzenText>
            <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.P">
                ・Esc長押し（1秒）: 練習終了
            </RadzenText>
            <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.P">
                ・@RetryShortcutKeyDisplayString : リトライ
            </RadzenText>
        </div>
        <div class="col-3">
            <RadzenButton Shade="Shade.Light" Click=@OnClickNextButton Text="次の文へ)" ButtonStyle="ButtonStyle.Primary" class="w-75 mb-3"/>
            <RadzenButton Variant="Variant.Outlined" Shade="Shade.Lighter" Click=@Finish Text="練習終了" ButtonStyle="ButtonStyle.Danger" class="w-75"/>
            <RadzenButton Variant="Variant.Outlined" Shade="Shade.Lighter" Click=@Init Text="リトライ" ButtonStyle="ButtonStyle.Primary" class="w-75"/>
        </div>
    </div>
</div>

@code {
    private const string EndAnnouncement = "### おつかれさまでした！Result(Summary)タブより練習結果を開いてください。";
    private static string? _currentTaskSentence = string.Empty;
    private static string _currentInputSentence = string.Empty;
    private static int _currentSectionNumber = 0;
    private static int _allSectionNumber = 0;
    private bool isMac;
    private string RetryShortcutKeyDisplayString => isMac ? "Command(⌘)+R" : "Ctrl+R";
    private string SubmitShortcutKeyDisplayString => isMac ? "Command(⌘)+Enter" : "Ctrl+Enter";
    
    protected override async Task OnInitializedAsync() => await Init();

    private async Task Init()
    {
        var controller = Practice.Controller;
        if (controller == null) { return; }
        
        controller.Reset();
        _currentTaskSentence = controller.GetFirstTaskSentence();
        _currentInputSentence = string.Empty;
        _allSectionNumber = controller.GetSectionCount();
        _currentSectionNumber = controller.GetCurrentSectionNumber();
        await Task.CompletedTask;
    }

    private void GoNextSection()
    {
        var controller = Practice.Controller;
        if (controller == null) { return; }
        
        // すでに終わっているなら何もしない
        if (controller.IsFinished) { return; }

        // 次の文章があるかどうか?
        // TODO : なければ最終セクションの処理
        if (controller.HasNextTaskSentence())
        {
            var nextTaskSentence = controller.GetNextTaskSentence();
            _currentTaskSentence = nextTaskSentence;
            // 入力文章の送信
            controller.SendAndScoringInputSentence(_currentInputSentence);
            _currentInputSentence = "";
            controller.IncrementTaskSentenceIndex();
            _currentSectionNumber = controller.GetCurrentSectionNumber();
        }
        // 最終セクション
        else
        {
            Finish();
            controller.IncrementTaskSentenceIndex();
        }
    }

    [JSInvokable]
    public void Finish()
    {
        var controller = Practice.Controller;
        if (controller == null) { return; }
        
        // すでに終わっているなら何もしない
        if (controller.IsFinished) { return; }
        
        // 何も打たずに練習終了はしない
        if (controller.IsFirstSentence() && string.IsNullOrEmpty(_currentInputSentence)) { return; }

        _currentTaskSentence = EndAnnouncement;
        
        // 入力文章の送信
        if (!string.IsNullOrEmpty(_currentInputSentence))
        {
            controller.SendAndScoringInputSentence(_currentInputSentence);
        }

        controller.DoFinishProcess();
        _currentInputSentence = string.Empty;
        
        StateHasChanged();
    }

    [JSInvokable]
    public void OnClickNextButton()
    {
        GoNextSection();
        StateHasChanged();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var dotNetRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("setupTypingShortcuts", "typingArea", dotNetRef);
            
            isMac = await JSRuntime.InvokeAsync<bool>("isMacOS");
            StateHasChanged();
        }
    }

    private void OnInput(string? value)
    {
        if (value is null) return;
        _currentInputSentence = value;
    }

    private void OnCopy() { }

    private void OnPaste() { }
}