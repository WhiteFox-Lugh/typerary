@page "/typerary/practice/{BookId}"
@inject HttpClient Http
@inject NavigationManager Nav;

<PageTitle>Typerary - Practice</PageTitle>

<Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(1)">
    <article class="content p-5 m-5 body-bg-alpha rz-shadow-8 rz-border-radius-3">
        @if (!isLoadComplete)
        {
            <div class="loader">Loading...</div>
        }
        else
        {
            <RadzenText TextStyle="TextStyle.DisplayH4" TagName="TagName.H3" class="mb-5 article-heading" data-en="Practice">@(bookTitle)</RadzenText>
            <Animate Animation="Animations.FadeUp" Duration="TimeSpan.FromSeconds(0.75)">
                <RadzenTabs @bind-SelectedIndex=@tabIndex Change=@OnChange>
                    <Tabs>
                        <RadzenTabsItem Text="Practice">
                            <PracticeUserInput />
                        </RadzenTabsItem>

                        <!--
                            TODO: 設定画面を作る
                        <RadzenTabsItem Text="Config">
                            <PracticeConfig />
                        </RadzenTabsItem>
                        -->

                        <RadzenTabsItem Text="Result(Summary)">
                            <PracticeResultSummary CurrentResult=@controller.CurrentPracticeResult />
                        </RadzenTabsItem>

                        <!---
                            TODO; リザルト詳細を作る
                        <RadzenTabsItem Text="Result(Detail)">
                            <PracticeResultDetail />
                        </RadzenTabsItem>
                        -->
                    </Tabs>
                </RadzenTabs>
            </Animate>
        }
    </article>
</Animate>

@code {
    private enum TabIndex
    {
        Practice = 0,
        ResultSummary = 1
    };

    private static bool isLoadComplete = false;
    private static string bookTitle = "";
    private static int tabIndex = 0;
    private static string bookId;
    public static PracticeController controller;

    [Parameter]
    public string BookId { get => bookId; set => bookId = GetSanitizedBookId(value); }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // read json data
            tabIndex = 0;
            var book = await Http.GetFromJsonAsync<Book?>($"/jsondata/works/{bookId}.json");
            if (book is null) throw new InvalidDataException("Exception: json data load failed");

            // set data
            bookTitle = book.Title;
            controller = new PracticeController(book);
            isLoadComplete = true;
        }
        catch (HttpRequestException ex)
        {
            Console.Error.WriteLine($"Exception: HttpRequestException \n{ex.Message}");
        }
        catch (TaskCanceledException ex)
        {
            Console.Error.WriteLine($"Exception: TaskCanceledException \n{ex.Message}");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Unhandled Exception \n{ex.Message}");
        }
        finally {
            await Task.CompletedTask;
        }
    }

    private string GetSanitizedBookId(string originalBookId)
    {
        var sanitizer = new HtmlSanitizer();
        var sanitizedId = sanitizer.Sanitize(originalBookId);
        return sanitizedId;
    }

    private void OnChange(int index){

    }
}
