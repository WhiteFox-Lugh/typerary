#if DEBUG
@page "/typerary/works"
#else
@page "/works"
#endif
@inject HttpClient Http
@inject IJSRuntime JsRuntime

<PageTitle>Typerary - Works</PageTitle>

<Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(1)">
    <article class="content p-5 m-5 body-bg-alpha rz-shadow-8 rz-border-radius-3">

        <RadzenText TextStyle="TextStyle.DisplayH3" class="mb-5 article-heading" data-en="Works">作品一覧</RadzenText>

        @if (_works == null)
        {
            <div class="loader">Loading...</div>
        }
        else
        {
            <Animate Animation="Animations.FadeUp" Duration="TimeSpan.FromSeconds(0.75)">
                <RadzenDataGrid AllowFiltering="true" AllowPaging="true" PageSize="20" AllowSorting="true" AllowMultiColumnSorting="true" ShowMultiColumnSortingIndex="true" Data="@_works" TItem="WorkData" class="rz-shadow-2 mt-5">
                    <Columns>
                        <RadzenDataGridColumn Width="5%" TItem="WorkData" Title="#" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                            <Template Context="work">
                                @(_works.IndexOf(work) + 1)
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Width="40%" TItem="WorkData" Property="TitleYomi" Title="作品名 / Title">
                            <Template Context="work">
                                <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H5" class="rz-color-primary-darker">
                                    <RadzenLink Path=@GetUrl(work.WorkId) Text=@(work.Title) />
                                </RadzenText>
                                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.P" class="rz-color-primary-darker">
                                    @(work.SubTitle)
                                </RadzenText>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Width="25%" TItem="WorkData" Property="Author" Title="著者 / Author">
                            <Template Context="work">
                                <RadzenText TextStyle="TextStyle.H6" TagName="TagName.P">
                                    @(work.Author)
                                </RadzenText>
                                <RadzenText TextStyle="TextStyle.Caption" TagName="TagName.P">
                                    @(work.AuthorKana)
                                </RadzenText>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Width="15%" TItem="WorkData" Property="Language" Title="言語 / Language">
                            <Template Context="work">
                                <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.P">
                                    <RadzenBadge BadgeStyle=@(work.GetLanguageBadgeStyle()) Text=@(work.GetLanguageScreenName()) />
                                </RadzenText>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Width="15%" TItem="WorkData" Property="WorkUri" Sortable="false" Filterable="false" Title="ソース / Source">
                            <Template Context="work">
                                <RadzenButton Click=@(_ => { if (work.WorkUri != null) { OnClickResourceButton(work.WorkUri.ToString()); } }) Variant="Variant.Outlined" Shade="Shade.Light" Text="@(work.Source)" ButtonStyle="ButtonStyle.Primary" />
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </Animate>
        }
    </article>
</Animate>

@code {
    private List<WorkData>? _works;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var data = await Http.GetFromJsonAsync<WorkDataList>("jsonData/works.json");
            if (data != null)
            {
                _works = data.WorkList;
            }
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Exception: HttpRequestException \n{ex.Message}");
            _works = new();
        }
        catch (TaskCanceledException ex){
            Console.WriteLine($"Exception: TaskCanceledException \n{ex.Message}");
            _works = new();
        }
        catch (Exception ex){
            Console.WriteLine($"Exception \n{ex.Message}");
            _works = new();
        }
        
    }

    private string GetUrl(string bookId) => $"/typerary/practice/{bookId}";

    async void OnClickResourceButton(string url){
        await JsRuntime.InvokeAsync<object>("open", url, "_blank");
    }

}
